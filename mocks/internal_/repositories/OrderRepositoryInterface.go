// Code generated by mockery v2.43.2. DO NOT EDIT.

package repositories

import (
	entities "github.com/ShukinDmitriy/gophermart/internal/entities"
	mock "github.com/stretchr/testify/mock"

	models "github.com/ShukinDmitriy/gophermart/internal/models"
)

// OrderRepositoryInterface is an autogenerated mock type for the OrderRepositoryInterface type
type OrderRepositoryInterface struct {
	mock.Mock
}

type OrderRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderRepositoryInterface) EXPECT() *OrderRepositoryInterface_Expecter {
	return &OrderRepositoryInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: number, userID
func (_m *OrderRepositoryInterface) Create(number string, userID uint) (*entities.Order, error) {
	ret := _m.Called(number, userID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entities.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint) (*entities.Order, error)); ok {
		return rf(number, userID)
	}
	if rf, ok := ret.Get(0).(func(string, uint) *entities.Order); ok {
		r0 = rf(number, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint) error); ok {
		r1 = rf(number, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepositoryInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type OrderRepositoryInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - number string
//   - userID uint
func (_e *OrderRepositoryInterface_Expecter) Create(number interface{}, userID interface{}) *OrderRepositoryInterface_Create_Call {
	return &OrderRepositoryInterface_Create_Call{Call: _e.mock.On("Create", number, userID)}
}

func (_c *OrderRepositoryInterface_Create_Call) Run(run func(number string, userID uint)) *OrderRepositoryInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint))
	})
	return _c
}

func (_c *OrderRepositoryInterface_Create_Call) Return(_a0 *entities.Order, _a1 error) *OrderRepositoryInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepositoryInterface_Create_Call) RunAndReturn(run func(string, uint) (*entities.Order, error)) *OrderRepositoryInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByNumber provides a mock function with given fields: number
func (_m *OrderRepositoryInterface) FindByNumber(number string) (*entities.Order, error) {
	ret := _m.Called(number)

	if len(ret) == 0 {
		panic("no return value specified for FindByNumber")
	}

	var r0 *entities.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Order, error)); ok {
		return rf(number)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Order); ok {
		r0 = rf(number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepositoryInterface_FindByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByNumber'
type OrderRepositoryInterface_FindByNumber_Call struct {
	*mock.Call
}

// FindByNumber is a helper method to define mock.On call
//   - number string
func (_e *OrderRepositoryInterface_Expecter) FindByNumber(number interface{}) *OrderRepositoryInterface_FindByNumber_Call {
	return &OrderRepositoryInterface_FindByNumber_Call{Call: _e.mock.On("FindByNumber", number)}
}

func (_c *OrderRepositoryInterface_FindByNumber_Call) Run(run func(number string)) *OrderRepositoryInterface_FindByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OrderRepositoryInterface_FindByNumber_Call) Return(_a0 *entities.Order, _a1 error) *OrderRepositoryInterface_FindByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepositoryInterface_FindByNumber_Call) RunAndReturn(run func(string) (*entities.Order, error)) *OrderRepositoryInterface_FindByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrdersByUserID provides a mock function with given fields: userID
func (_m *OrderRepositoryInterface) GetOrdersByUserID(userID uint) ([]*models.GetOrdersResponse, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrdersByUserID")
	}

	var r0 []*models.GetOrdersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]*models.GetOrdersResponse, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) []*models.GetOrdersResponse); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.GetOrdersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepositoryInterface_GetOrdersByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrdersByUserID'
type OrderRepositoryInterface_GetOrdersByUserID_Call struct {
	*mock.Call
}

// GetOrdersByUserID is a helper method to define mock.On call
//   - userID uint
func (_e *OrderRepositoryInterface_Expecter) GetOrdersByUserID(userID interface{}) *OrderRepositoryInterface_GetOrdersByUserID_Call {
	return &OrderRepositoryInterface_GetOrdersByUserID_Call{Call: _e.mock.On("GetOrdersByUserID", userID)}
}

func (_c *OrderRepositoryInterface_GetOrdersByUserID_Call) Run(run func(userID uint)) *OrderRepositoryInterface_GetOrdersByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *OrderRepositoryInterface_GetOrdersByUserID_Call) Return(_a0 []*models.GetOrdersResponse, _a1 error) *OrderRepositoryInterface_GetOrdersByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepositoryInterface_GetOrdersByUserID_Call) RunAndReturn(run func(uint) ([]*models.GetOrdersResponse, error)) *OrderRepositoryInterface_GetOrdersByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrdersForProcess provides a mock function with given fields:
func (_m *OrderRepositoryInterface) GetOrdersForProcess() ([]*entities.Order, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrdersForProcess")
	}

	var r0 []*entities.Order
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Order, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Order)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepositoryInterface_GetOrdersForProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrdersForProcess'
type OrderRepositoryInterface_GetOrdersForProcess_Call struct {
	*mock.Call
}

// GetOrdersForProcess is a helper method to define mock.On call
func (_e *OrderRepositoryInterface_Expecter) GetOrdersForProcess() *OrderRepositoryInterface_GetOrdersForProcess_Call {
	return &OrderRepositoryInterface_GetOrdersForProcess_Call{Call: _e.mock.On("GetOrdersForProcess")}
}

func (_c *OrderRepositoryInterface_GetOrdersForProcess_Call) Run(run func()) *OrderRepositoryInterface_GetOrdersForProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OrderRepositoryInterface_GetOrdersForProcess_Call) Return(_a0 []*entities.Order, _a1 error) *OrderRepositoryInterface_GetOrdersForProcess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepositoryInterface_GetOrdersForProcess_Call) RunAndReturn(run func() ([]*entities.Order, error)) *OrderRepositoryInterface_GetOrdersForProcess_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrderByAccrualOrder provides a mock function with given fields: accrualOrder
func (_m *OrderRepositoryInterface) UpdateOrderByAccrualOrder(accrualOrder *models.AccrualOrderResponse) error {
	ret := _m.Called(accrualOrder)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderByAccrualOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.AccrualOrderResponse) error); ok {
		r0 = rf(accrualOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepositoryInterface_UpdateOrderByAccrualOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderByAccrualOrder'
type OrderRepositoryInterface_UpdateOrderByAccrualOrder_Call struct {
	*mock.Call
}

// UpdateOrderByAccrualOrder is a helper method to define mock.On call
//   - accrualOrder *models.AccrualOrderResponse
func (_e *OrderRepositoryInterface_Expecter) UpdateOrderByAccrualOrder(accrualOrder interface{}) *OrderRepositoryInterface_UpdateOrderByAccrualOrder_Call {
	return &OrderRepositoryInterface_UpdateOrderByAccrualOrder_Call{Call: _e.mock.On("UpdateOrderByAccrualOrder", accrualOrder)}
}

func (_c *OrderRepositoryInterface_UpdateOrderByAccrualOrder_Call) Run(run func(accrualOrder *models.AccrualOrderResponse)) *OrderRepositoryInterface_UpdateOrderByAccrualOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.AccrualOrderResponse))
	})
	return _c
}

func (_c *OrderRepositoryInterface_UpdateOrderByAccrualOrder_Call) Return(_a0 error) *OrderRepositoryInterface_UpdateOrderByAccrualOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepositoryInterface_UpdateOrderByAccrualOrder_Call) RunAndReturn(run func(*models.AccrualOrderResponse) error) *OrderRepositoryInterface_UpdateOrderByAccrualOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderRepositoryInterface creates a new instance of OrderRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepositoryInterface {
	mock := &OrderRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
