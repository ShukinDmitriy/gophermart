// Code generated by mockery v2.43.2. DO NOT EDIT.

package repositories

import (
	models "github.com/ShukinDmitriy/gophermart/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// OperationRepositoryInterface is an autogenerated mock type for the OperationRepositoryInterface type
type OperationRepositoryInterface struct {
	mock.Mock
}

type OperationRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *OperationRepositoryInterface) EXPECT() *OperationRepositoryInterface_Expecter {
	return &OperationRepositoryInterface_Expecter{mock: &_m.Mock}
}

// CreateAccrual provides a mock function with given fields: accountID, orderNumber, sum
func (_m *OperationRepositoryInterface) CreateAccrual(accountID uint, orderNumber string, sum float32) error {
	ret := _m.Called(accountID, orderNumber, sum)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccrual")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string, float32) error); ok {
		r0 = rf(accountID, orderNumber, sum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OperationRepositoryInterface_CreateAccrual_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccrual'
type OperationRepositoryInterface_CreateAccrual_Call struct {
	*mock.Call
}

// CreateAccrual is a helper method to define mock.On call
//   - accountID uint
//   - orderNumber string
//   - sum float32
func (_e *OperationRepositoryInterface_Expecter) CreateAccrual(accountID interface{}, orderNumber interface{}, sum interface{}) *OperationRepositoryInterface_CreateAccrual_Call {
	return &OperationRepositoryInterface_CreateAccrual_Call{Call: _e.mock.On("CreateAccrual", accountID, orderNumber, sum)}
}

func (_c *OperationRepositoryInterface_CreateAccrual_Call) Run(run func(accountID uint, orderNumber string, sum float32)) *OperationRepositoryInterface_CreateAccrual_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(string), args[2].(float32))
	})
	return _c
}

func (_c *OperationRepositoryInterface_CreateAccrual_Call) Return(_a0 error) *OperationRepositoryInterface_CreateAccrual_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OperationRepositoryInterface_CreateAccrual_Call) RunAndReturn(run func(uint, string, float32) error) *OperationRepositoryInterface_CreateAccrual_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWithdrawn provides a mock function with given fields: accountID, orderNumber, sum
func (_m *OperationRepositoryInterface) CreateWithdrawn(accountID uint, orderNumber string, sum float32) error {
	ret := _m.Called(accountID, orderNumber, sum)

	if len(ret) == 0 {
		panic("no return value specified for CreateWithdrawn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string, float32) error); ok {
		r0 = rf(accountID, orderNumber, sum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OperationRepositoryInterface_CreateWithdrawn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWithdrawn'
type OperationRepositoryInterface_CreateWithdrawn_Call struct {
	*mock.Call
}

// CreateWithdrawn is a helper method to define mock.On call
//   - accountID uint
//   - orderNumber string
//   - sum float32
func (_e *OperationRepositoryInterface_Expecter) CreateWithdrawn(accountID interface{}, orderNumber interface{}, sum interface{}) *OperationRepositoryInterface_CreateWithdrawn_Call {
	return &OperationRepositoryInterface_CreateWithdrawn_Call{Call: _e.mock.On("CreateWithdrawn", accountID, orderNumber, sum)}
}

func (_c *OperationRepositoryInterface_CreateWithdrawn_Call) Run(run func(accountID uint, orderNumber string, sum float32)) *OperationRepositoryInterface_CreateWithdrawn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(string), args[2].(float32))
	})
	return _c
}

func (_c *OperationRepositoryInterface_CreateWithdrawn_Call) Return(_a0 error) *OperationRepositoryInterface_CreateWithdrawn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OperationRepositoryInterface_CreateWithdrawn_Call) RunAndReturn(run func(uint, string, float32) error) *OperationRepositoryInterface_CreateWithdrawn_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithdrawalsByAccountID provides a mock function with given fields: accountID
func (_m *OperationRepositoryInterface) GetWithdrawalsByAccountID(accountID uint) ([]models.GetWithdrawalsResponse, error) {
	ret := _m.Called(accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetWithdrawalsByAccountID")
	}

	var r0 []models.GetWithdrawalsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]models.GetWithdrawalsResponse, error)); ok {
		return rf(accountID)
	}
	if rf, ok := ret.Get(0).(func(uint) []models.GetWithdrawalsResponse); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GetWithdrawalsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OperationRepositoryInterface_GetWithdrawalsByAccountID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawalsByAccountID'
type OperationRepositoryInterface_GetWithdrawalsByAccountID_Call struct {
	*mock.Call
}

// GetWithdrawalsByAccountID is a helper method to define mock.On call
//   - accountID uint
func (_e *OperationRepositoryInterface_Expecter) GetWithdrawalsByAccountID(accountID interface{}) *OperationRepositoryInterface_GetWithdrawalsByAccountID_Call {
	return &OperationRepositoryInterface_GetWithdrawalsByAccountID_Call{Call: _e.mock.On("GetWithdrawalsByAccountID", accountID)}
}

func (_c *OperationRepositoryInterface_GetWithdrawalsByAccountID_Call) Run(run func(accountID uint)) *OperationRepositoryInterface_GetWithdrawalsByAccountID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *OperationRepositoryInterface_GetWithdrawalsByAccountID_Call) Return(_a0 []models.GetWithdrawalsResponse, _a1 error) *OperationRepositoryInterface_GetWithdrawalsByAccountID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OperationRepositoryInterface_GetWithdrawalsByAccountID_Call) RunAndReturn(run func(uint) ([]models.GetWithdrawalsResponse, error)) *OperationRepositoryInterface_GetWithdrawalsByAccountID_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithdrawnByAccountID provides a mock function with given fields: accountID
func (_m *OperationRepositoryInterface) GetWithdrawnByAccountID(accountID uint) (float32, error) {
	ret := _m.Called(accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetWithdrawnByAccountID")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (float32, error)); ok {
		return rf(accountID)
	}
	if rf, ok := ret.Get(0).(func(uint) float32); ok {
		r0 = rf(accountID)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OperationRepositoryInterface_GetWithdrawnByAccountID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawnByAccountID'
type OperationRepositoryInterface_GetWithdrawnByAccountID_Call struct {
	*mock.Call
}

// GetWithdrawnByAccountID is a helper method to define mock.On call
//   - accountID uint
func (_e *OperationRepositoryInterface_Expecter) GetWithdrawnByAccountID(accountID interface{}) *OperationRepositoryInterface_GetWithdrawnByAccountID_Call {
	return &OperationRepositoryInterface_GetWithdrawnByAccountID_Call{Call: _e.mock.On("GetWithdrawnByAccountID", accountID)}
}

func (_c *OperationRepositoryInterface_GetWithdrawnByAccountID_Call) Run(run func(accountID uint)) *OperationRepositoryInterface_GetWithdrawnByAccountID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *OperationRepositoryInterface_GetWithdrawnByAccountID_Call) Return(_a0 float32, _a1 error) *OperationRepositoryInterface_GetWithdrawnByAccountID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OperationRepositoryInterface_GetWithdrawnByAccountID_Call) RunAndReturn(run func(uint) (float32, error)) *OperationRepositoryInterface_GetWithdrawnByAccountID_Call {
	_c.Call.Return(run)
	return _c
}

// NewOperationRepositoryInterface creates a new instance of OperationRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOperationRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OperationRepositoryInterface {
	mock := &OperationRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
