// Code generated by mockery v2.43.2. DO NOT EDIT.

package repositories

import (
	entities "github.com/ShukinDmitriy/gophermart/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// AccountRepositoryInterface is an autogenerated mock type for the AccountRepositoryInterface type
type AccountRepositoryInterface struct {
	mock.Mock
}

type AccountRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountRepositoryInterface) EXPECT() *AccountRepositoryInterface_Expecter {
	return &AccountRepositoryInterface_Expecter{mock: &_m.Mock}
}

// FindByUserID provides a mock function with given fields: userID, accountType
func (_m *AccountRepositoryInterface) FindByUserID(userID uint, accountType entities.AccountType) (*entities.Account, error) {
	ret := _m.Called(userID, accountType)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserID")
	}

	var r0 *entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, entities.AccountType) (*entities.Account, error)); ok {
		return rf(userID, accountType)
	}
	if rf, ok := ret.Get(0).(func(uint, entities.AccountType) *entities.Account); ok {
		r0 = rf(userID, accountType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, entities.AccountType) error); ok {
		r1 = rf(userID, accountType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepositoryInterface_FindByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserID'
type AccountRepositoryInterface_FindByUserID_Call struct {
	*mock.Call
}

// FindByUserID is a helper method to define mock.On call
//   - userID uint
//   - accountType entities.AccountType
func (_e *AccountRepositoryInterface_Expecter) FindByUserID(userID interface{}, accountType interface{}) *AccountRepositoryInterface_FindByUserID_Call {
	return &AccountRepositoryInterface_FindByUserID_Call{Call: _e.mock.On("FindByUserID", userID, accountType)}
}

func (_c *AccountRepositoryInterface_FindByUserID_Call) Run(run func(userID uint, accountType entities.AccountType)) *AccountRepositoryInterface_FindByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(entities.AccountType))
	})
	return _c
}

func (_c *AccountRepositoryInterface_FindByUserID_Call) Return(_a0 *entities.Account, _a1 error) *AccountRepositoryInterface_FindByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepositoryInterface_FindByUserID_Call) RunAndReturn(run func(uint, entities.AccountType) (*entities.Account, error)) *AccountRepositoryInterface_FindByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccountRepositoryInterface creates a new instance of AccountRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepositoryInterface {
	mock := &AccountRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
