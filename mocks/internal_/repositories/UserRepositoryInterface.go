// Code generated by mockery v2.43.2. DO NOT EDIT.

package repositories

import (
	entities "github.com/ShukinDmitriy/gophermart/internal/entities"
	mock "github.com/stretchr/testify/mock"

	models "github.com/ShukinDmitriy/gophermart/internal/models"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

type UserRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepositoryInterface) EXPECT() *UserRepositoryInterface_Expecter {
	return &UserRepositoryInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: userRegister
func (_m *UserRepositoryInterface) Create(userRegister models.UserRegisterRequest) (*models.UserInfoResponse, error) {
	ret := _m.Called(userRegister)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.UserInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(models.UserRegisterRequest) (*models.UserInfoResponse, error)); ok {
		return rf(userRegister)
	}
	if rf, ok := ret.Get(0).(func(models.UserRegisterRequest) *models.UserInfoResponse); ok {
		r0 = rf(userRegister)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(models.UserRegisterRequest) error); ok {
		r1 = rf(userRegister)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserRepositoryInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - userRegister models.UserRegisterRequest
func (_e *UserRepositoryInterface_Expecter) Create(userRegister interface{}) *UserRepositoryInterface_Create_Call {
	return &UserRepositoryInterface_Create_Call{Call: _e.mock.On("Create", userRegister)}
}

func (_c *UserRepositoryInterface_Create_Call) Run(run func(userRegister models.UserRegisterRequest)) *UserRepositoryInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.UserRegisterRequest))
	})
	return _c
}

func (_c *UserRepositoryInterface_Create_Call) Return(_a0 *models.UserInfoResponse, _a1 error) *UserRepositoryInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryInterface_Create_Call) RunAndReturn(run func(models.UserRegisterRequest) (*models.UserInfoResponse, error)) *UserRepositoryInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: id
func (_m *UserRepositoryInterface) Find(id uint) (*models.UserInfoResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *models.UserInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.UserInfoResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.UserInfoResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryInterface_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type UserRepositoryInterface_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - id uint
func (_e *UserRepositoryInterface_Expecter) Find(id interface{}) *UserRepositoryInterface_Find_Call {
	return &UserRepositoryInterface_Find_Call{Call: _e.mock.On("Find", id)}
}

func (_c *UserRepositoryInterface_Find_Call) Run(run func(id uint)) *UserRepositoryInterface_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *UserRepositoryInterface_Find_Call) Return(_a0 *models.UserInfoResponse, _a1 error) *UserRepositoryInterface_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryInterface_Find_Call) RunAndReturn(run func(uint) (*models.UserInfoResponse, error)) *UserRepositoryInterface_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindBy provides a mock function with given fields: filter
func (_m *UserRepositoryInterface) FindBy(filter models.UserSearchFilter) (*entities.User, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for FindBy")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(models.UserSearchFilter) (*entities.User, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(models.UserSearchFilter) *entities.User); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(models.UserSearchFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryInterface_FindBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBy'
type UserRepositoryInterface_FindBy_Call struct {
	*mock.Call
}

// FindBy is a helper method to define mock.On call
//   - filter models.UserSearchFilter
func (_e *UserRepositoryInterface_Expecter) FindBy(filter interface{}) *UserRepositoryInterface_FindBy_Call {
	return &UserRepositoryInterface_FindBy_Call{Call: _e.mock.On("FindBy", filter)}
}

func (_c *UserRepositoryInterface_FindBy_Call) Run(run func(filter models.UserSearchFilter)) *UserRepositoryInterface_FindBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.UserSearchFilter))
	})
	return _c
}

func (_c *UserRepositoryInterface_FindBy_Call) Return(_a0 *entities.User, _a1 error) *UserRepositoryInterface_FindBy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryInterface_FindBy_Call) RunAndReturn(run func(models.UserSearchFilter) (*entities.User, error)) *UserRepositoryInterface_FindBy_Call {
	_c.Call.Return(run)
	return _c
}

// GeneratePasswordHash provides a mock function with given fields: password
func (_m *UserRepositoryInterface) GeneratePasswordHash(password string) ([]byte, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for GeneratePasswordHash")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryInterface_GeneratePasswordHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeneratePasswordHash'
type UserRepositoryInterface_GeneratePasswordHash_Call struct {
	*mock.Call
}

// GeneratePasswordHash is a helper method to define mock.On call
//   - password string
func (_e *UserRepositoryInterface_Expecter) GeneratePasswordHash(password interface{}) *UserRepositoryInterface_GeneratePasswordHash_Call {
	return &UserRepositoryInterface_GeneratePasswordHash_Call{Call: _e.mock.On("GeneratePasswordHash", password)}
}

func (_c *UserRepositoryInterface_GeneratePasswordHash_Call) Run(run func(password string)) *UserRepositoryInterface_GeneratePasswordHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserRepositoryInterface_GeneratePasswordHash_Call) Return(_a0 []byte, _a1 error) *UserRepositoryInterface_GeneratePasswordHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryInterface_GeneratePasswordHash_Call) RunAndReturn(run func(string) ([]byte, error)) *UserRepositoryInterface_GeneratePasswordHash_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepositoryInterface creates a new instance of UserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositoryInterface {
	mock := &UserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
