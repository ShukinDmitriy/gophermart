// Code generated by mockery v2.43.2. DO NOT EDIT.

package auth

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	models "github.com/ShukinDmitriy/gophermart/internal/models"
)

// AuthServiceInterface is an autogenerated mock type for the AuthServiceInterface type
type AuthServiceInterface struct {
	mock.Mock
}

type AuthServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthServiceInterface) EXPECT() *AuthServiceInterface_Expecter {
	return &AuthServiceInterface_Expecter{mock: &_m.Mock}
}

// GenerateTokensAndSetCookies provides a mock function with given fields: c, user
func (_m *AuthServiceInterface) GenerateTokensAndSetCookies(c echo.Context, user *models.UserInfoResponse) error {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTokensAndSetCookies")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, *models.UserInfoResponse) error); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthServiceInterface_GenerateTokensAndSetCookies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateTokensAndSetCookies'
type AuthServiceInterface_GenerateTokensAndSetCookies_Call struct {
	*mock.Call
}

// GenerateTokensAndSetCookies is a helper method to define mock.On call
//   - c echo.Context
//   - user *models.UserInfoResponse
func (_e *AuthServiceInterface_Expecter) GenerateTokensAndSetCookies(c interface{}, user interface{}) *AuthServiceInterface_GenerateTokensAndSetCookies_Call {
	return &AuthServiceInterface_GenerateTokensAndSetCookies_Call{Call: _e.mock.On("GenerateTokensAndSetCookies", c, user)}
}

func (_c *AuthServiceInterface_GenerateTokensAndSetCookies_Call) Run(run func(c echo.Context, user *models.UserInfoResponse)) *AuthServiceInterface_GenerateTokensAndSetCookies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context), args[1].(*models.UserInfoResponse))
	})
	return _c
}

func (_c *AuthServiceInterface_GenerateTokensAndSetCookies_Call) Return(_a0 error) *AuthServiceInterface_GenerateTokensAndSetCookies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthServiceInterface_GenerateTokensAndSetCookies_Call) RunAndReturn(run func(echo.Context, *models.UserInfoResponse) error) *AuthServiceInterface_GenerateTokensAndSetCookies_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserID provides a mock function with given fields: c
func (_m *AuthServiceInterface) GetUserID(c echo.Context) uint {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetUserID")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func(echo.Context) uint); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// AuthServiceInterface_GetUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserID'
type AuthServiceInterface_GetUserID_Call struct {
	*mock.Call
}

// GetUserID is a helper method to define mock.On call
//   - c echo.Context
func (_e *AuthServiceInterface_Expecter) GetUserID(c interface{}) *AuthServiceInterface_GetUserID_Call {
	return &AuthServiceInterface_GetUserID_Call{Call: _e.mock.On("GetUserID", c)}
}

func (_c *AuthServiceInterface_GetUserID_Call) Run(run func(c echo.Context)) *AuthServiceInterface_GetUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *AuthServiceInterface_GetUserID_Call) Return(_a0 uint) *AuthServiceInterface_GetUserID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthServiceInterface_GetUserID_Call) RunAndReturn(run func(echo.Context) uint) *AuthServiceInterface_GetUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthServiceInterface creates a new instance of AuthServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthServiceInterface {
	mock := &AuthServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
