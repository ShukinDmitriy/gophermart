// Code generated by mockery v2.43.2. DO NOT EDIT.

package services

import (
	entities "github.com/ShukinDmitriy/gophermart/internal/entities"
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// AccrualServiceInterface is an autogenerated mock type for the AccrualServiceInterface type
type AccrualServiceInterface struct {
	mock.Mock
}

type AccrualServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AccrualServiceInterface) EXPECT() *AccrualServiceInterface_Expecter {
	return &AccrualServiceInterface_Expecter{mock: &_m.Mock}
}

// ProcessFailedOrders provides a mock function with given fields: e
func (_m *AccrualServiceInterface) ProcessFailedOrders(e *echo.Echo) {
	_m.Called(e)
}

// AccrualServiceInterface_ProcessFailedOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessFailedOrders'
type AccrualServiceInterface_ProcessFailedOrders_Call struct {
	*mock.Call
}

// ProcessFailedOrders is a helper method to define mock.On call
//   - e *echo.Echo
func (_e *AccrualServiceInterface_Expecter) ProcessFailedOrders(e interface{}) *AccrualServiceInterface_ProcessFailedOrders_Call {
	return &AccrualServiceInterface_ProcessFailedOrders_Call{Call: _e.mock.On("ProcessFailedOrders", e)}
}

func (_c *AccrualServiceInterface_ProcessFailedOrders_Call) Run(run func(e *echo.Echo)) *AccrualServiceInterface_ProcessFailedOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*echo.Echo))
	})
	return _c
}

func (_c *AccrualServiceInterface_ProcessFailedOrders_Call) Return() *AccrualServiceInterface_ProcessFailedOrders_Call {
	_c.Call.Return()
	return _c
}

func (_c *AccrualServiceInterface_ProcessFailedOrders_Call) RunAndReturn(run func(*echo.Echo)) *AccrualServiceInterface_ProcessFailedOrders_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessOrders provides a mock function with given fields: e
func (_m *AccrualServiceInterface) ProcessOrders(e *echo.Echo) {
	_m.Called(e)
}

// AccrualServiceInterface_ProcessOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessOrders'
type AccrualServiceInterface_ProcessOrders_Call struct {
	*mock.Call
}

// ProcessOrders is a helper method to define mock.On call
//   - e *echo.Echo
func (_e *AccrualServiceInterface_Expecter) ProcessOrders(e interface{}) *AccrualServiceInterface_ProcessOrders_Call {
	return &AccrualServiceInterface_ProcessOrders_Call{Call: _e.mock.On("ProcessOrders", e)}
}

func (_c *AccrualServiceInterface_ProcessOrders_Call) Run(run func(e *echo.Echo)) *AccrualServiceInterface_ProcessOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*echo.Echo))
	})
	return _c
}

func (_c *AccrualServiceInterface_ProcessOrders_Call) Return() *AccrualServiceInterface_ProcessOrders_Call {
	_c.Call.Return()
	return _c
}

func (_c *AccrualServiceInterface_ProcessOrders_Call) RunAndReturn(run func(*echo.Echo)) *AccrualServiceInterface_ProcessOrders_Call {
	_c.Call.Return(run)
	return _c
}

// SendOrderToQueue provides a mock function with given fields: order
func (_m *AccrualServiceInterface) SendOrderToQueue(order entities.Order) {
	_m.Called(order)
}

// AccrualServiceInterface_SendOrderToQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendOrderToQueue'
type AccrualServiceInterface_SendOrderToQueue_Call struct {
	*mock.Call
}

// SendOrderToQueue is a helper method to define mock.On call
//   - order entities.Order
func (_e *AccrualServiceInterface_Expecter) SendOrderToQueue(order interface{}) *AccrualServiceInterface_SendOrderToQueue_Call {
	return &AccrualServiceInterface_SendOrderToQueue_Call{Call: _e.mock.On("SendOrderToQueue", order)}
}

func (_c *AccrualServiceInterface_SendOrderToQueue_Call) Run(run func(order entities.Order)) *AccrualServiceInterface_SendOrderToQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Order))
	})
	return _c
}

func (_c *AccrualServiceInterface_SendOrderToQueue_Call) Return() *AccrualServiceInterface_SendOrderToQueue_Call {
	_c.Call.Return()
	return _c
}

func (_c *AccrualServiceInterface_SendOrderToQueue_Call) RunAndReturn(run func(entities.Order)) *AccrualServiceInterface_SendOrderToQueue_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccrualServiceInterface creates a new instance of AccrualServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccrualServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccrualServiceInterface {
	mock := &AccrualServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
